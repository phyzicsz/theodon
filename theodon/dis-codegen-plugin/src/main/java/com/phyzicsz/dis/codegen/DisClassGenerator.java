/*
 * Copyright 2019 phyzicsz.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.phyzicsz.dis.codegen;

import com.phyzicsz.dis.datamodel.api.AbstractDisObject;
import com.phyzicsz.dis.datamodel.api.DisAttribute;
import com.phyzicsz.dis.datamodel.api.DisClass;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import java.io.Serializable;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.lang.model.element.Modifier;

/**
 *
 * @author phyzicsz
 */
public class DisClassGenerator {

    private final Map<String, String> typeMap = new LinkedHashMap<>();

    public JavaFile generate(DisClass idl) throws ClassNotFoundException {

        TypeSpec.Builder mainBuilder = TypeSpec.classBuilder(idl.getName())
                .addSuperinterface(Serializable.class)
                .addSuperinterface(AbstractDisObject.class)
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc(idl.getComment());

        for (DisAttribute attr : idl.getAttributes()) {
            FieldSpec field = FieldGenerator.field(attr);
            MethodSpec getter = MethodGenerator.getter(field);
            MethodSpec setter = MethodGenerator.setter(field);
            mainBuilder.addField(field)
                    .addMethod(getter)
                    .addMethod(setter);
            
            typeMap.put(attr.getName(), attr.getType());

        }
        
        MethodSpec constructor = MethodGenerator.constructor(idl);
        MethodSpec wireline = MethodGenerator.wirelineSize(idl);
        MethodSpec serializer = MethodGenerator.serializer(typeMap);
        MethodSpec deserializer = MethodGenerator.deserializer(typeMap);
        MethodSpec equals = MethodGenerator.equalsMethod(idl);
        
        mainBuilder.addMethod(constructor)
                .addMethod(wireline)
                .addMethod(serializer)
                .addMethod(deserializer)
                .addMethod(equals);
       
        return JavaFile.builder(idl.getPackageName(), mainBuilder.build())
                .addFileComment(insertHeader(idl.getComment()))
                
                .build();

    }

    private String insertHeader(String content) {

        StringBuilder sb = new StringBuilder();
        sb.append("/**")
                .append("\n")
                .append("* Autogenerated by dis-codegen")
                .append("\n")
                .append("*")
                .append("\n")
                .append("DO NOT EDIT DIRECTLY")
                .append("\n")
                .append("*/")
                .append("\n")
                .append(content);
        return sb.toString();
    }
}
