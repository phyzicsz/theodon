/*
 * Copyright 2019 phyzicsz.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.phyzicsz.dis.codegen;

import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import javax.lang.model.element.Modifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author phyzicsz
 */
public class DisInterfaceGenerator {

    private static final Logger LOGGER = LoggerFactory.getLogger(DisInterfaceGenerator.class);
    
    private JavaFile javaFile;
    
    public DisInterfaceGenerator generate(String javaPackage) throws ClassNotFoundException {

        
        TypeSpec.Builder mainBuilder = TypeSpec.interfaceBuilder("AbstractDisObject")
                .addModifiers(Modifier.PUBLIC)
                .addMethod(MethodSpec.methodBuilder("serialize")
                        .returns(TypeName.VOID)
                        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                        .addParameter(ByteBuffer.class, "buffer")
                        .build())
                .addMethod(MethodSpec.methodBuilder("deserialize")
                        .returns(TypeName.VOID)
                        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                        .addParameter(ByteBuffer.class, "buffer")
                        .build())
                .addMethod(MethodSpec.methodBuilder("wirelineSize")
                        .returns(TypeName.INT)
                        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                        .build())
                .addJavadoc("Abstract base interface for DIS Objects");

        javaFile =  JavaFile.builder(javaPackage, mainBuilder.build())
                .addFileComment(insertHeader())
                .build();
        
        return this;
    }

    private String insertHeader() {

        StringBuilder sb = new StringBuilder();
        sb.append("/**")
                .append("\n")
                .append("* Autogenerated by dis-codegen")
                .append("\n")
                .append("*")
                .append("\n")
                .append("DO NOT EDIT DIRECTLY")
                .append("\n")
                .append("*/")
                .append("\n");
        return sb.toString();
    }
    
     public DisInterfaceGenerator writeClassFile(File outputPath) throws IOException{
        LOGGER.info("Writing file {}", javaFile.toJavaFileObject().getName());
        Path file = outputPath.toPath();
        file.toFile().mkdirs();
        javaFile.writeTo(file); 
        return this;
    }
}
